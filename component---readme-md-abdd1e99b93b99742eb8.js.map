{"version":3,"sources":["webpack:///../README.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"yPAQaA,G,UAAe,S,2LAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,kBACE,GAAM,oBADR,oBAGA,kDACA,kBACE,GAAM,QADR,SAGA,qBAAG,sBAAQC,WAAW,KAAnB,QACH,uBAAK,oBAAMA,WAAW,MAClB,UAAa,eADZ,gHAKL,kBACE,GAAM,WADR,YAGA,yDAAwC,iBAAGA,WAAW,IAClD,KAAQ,oCAD4B,UAAxC,YAGA,sBACE,kBAAIA,WAAW,MAAf,yDAEF,8BACE,iBAAGA,WAAW,cAAd,6SAIF,kGAAiF,iBAAGA,WAAW,IAC3F,KAAQ,qDADqE,uBAAjF,aAGA,kBACE,MAAS,GAET,kBAAIA,WAAW,MAAf,aAEF,uKACA,kBACE,GAAM,UADR,WAGA,2F,yLAKJJ,EAAWK,gBAAiB","file":"component---readme-md-abdd1e99b93b99742eb8.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-ui-webpack/react-ui-webpack/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"react-ui-webpack\"\n    }}>{`react-ui-webpack`}</h1>\n    <p>{`学习使用 webpack 进行打包，该包暂未发布。`}</p>\n    <h2 {...{\n      \"id\": \"1-基础\"\n    }}>{`1. 基础`}</h2>\n    <p><strong parentName=\"p\">{`使用:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import Avatar from 'react-ui-webpack/lib/avatar/index.js'\nimport 'react-ui-webpack/lib/avatar/index.css'\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"2-发现的问题\"\n    }}>{`2. 发现的问题`}</h2>\n    <p>{`经过测试发现, 用 webpack 打包和 rollup 打包的 `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/yes1am/mie-ui\"\n      }}>{`mie-ui`}</a>{` 库有点不一样:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`当前 UI 库，仅使用 Webpack 打出 ESM 类型的包，当设置 externals 时会有报错.`}</li>\n    </ol>\n    <blockquote>\n      <p parentName=\"blockquote\">{`The target environment doesn't support EcmaScriptModule syntax so it's not possible to use external type 'module'\nwhile analysing module external \"React\" for concatenation\nError: The target environment doesn't support EcmaScriptModule syntax so it's not possible to use external type 'module'`}</p>\n    </blockquote>\n    <p>{`具体原因未排查，因此当前打包结果，无法利用 ESM 自带的 tree shaking 来实现按需加载，而因为我们每个组件都进行了打包，因此可以使用 `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/ant-design/babel-plugin-import\"\n      }}>{`babel-plugin-import`}</a>{` 来使用按需加载。`}</p>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`打包结果似乎略大`}</li>\n    </ol>\n    <p>{`一个 avatar 组件压缩后有 10kb，而源码只有 4kb。且发现打包结果中包含了 css-loader 的相关代码(这感觉很奇怪)，难道样式不应该使用 mini-css-extract-plugin 来进行抽取，而应该使用脚本(比如 gulp )来将 less 转换为 css？`}</p>\n    <h2 {...{\n      \"id\": \"3-todo\"\n    }}>{`3. TODO`}</h2>\n    <p>{`找一个 webpack 打包的库看看相关流程，是否不应该只依赖 webpack 进行打包组件库，而应该借助脚本和其他的库`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}