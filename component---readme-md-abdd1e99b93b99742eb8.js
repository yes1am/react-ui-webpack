(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{"7OsV":function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return r})),a.d(t,"default",(function(){return p}));var n=a("Fcif"),b=a("+I+c"),c=(a("mXGw"),a("/FXl")),o=a("TjRS"),r=(a("aD51"),{});void 0!==r&&r&&r===Object(r)&&Object.isExtensible(r)&&!r.hasOwnProperty("__filemeta")&&Object.defineProperty(r,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"README.md"}});var i={_frontmatter:r},l=o.a;function p(e){var t=e.components,a=Object(b.a)(e,["components"]);return Object(c.b)(l,Object(n.a)({},i,a,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h1",{id:"react-ui-webpack"},"react-ui-webpack"),Object(c.b)("p",null,"学习使用 webpack 进行打包，该包暂未发布。"),Object(c.b)("h2",{id:"1-基础"},"1. 基础"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"使用:")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},"import Avatar from 'react-ui-webpack/lib/avatar/index.js'\nimport 'react-ui-webpack/lib/avatar/index.css'\n")),Object(c.b)("h2",{id:"2-发现的问题"},"2. 发现的问题"),Object(c.b)("p",null,"经过测试发现, 用 webpack 打包和 rollup 打包的 ",Object(c.b)("a",{parentName:"p",href:"https://github.com/yes1am/mie-ui"},"mie-ui")," 库有点不一样:"),Object(c.b)("ol",null,Object(c.b)("li",{parentName:"ol"},"当前 UI 库，仅使用 Webpack 打出 ESM 类型的包，当设置 externals 时会有报错.")),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"The target environment doesn't support EcmaScriptModule syntax so it's not possible to use external type 'module'\nwhile analysing module external \"React\" for concatenation\nError: The target environment doesn't support EcmaScriptModule syntax so it's not possible to use external type 'module'")),Object(c.b)("p",null,"具体原因未排查，因此当前打包结果，无法利用 ESM 自带的 tree shaking 来实现按需加载，而因为我们每个组件都进行了打包，因此可以使用 ",Object(c.b)("a",{parentName:"p",href:"https://github.com/ant-design/babel-plugin-import"},"babel-plugin-import")," 来使用按需加载。"),Object(c.b)("ol",{start:2},Object(c.b)("li",{parentName:"ol"},"打包结果似乎略大")),Object(c.b)("p",null,"一个 avatar 组件压缩后有 10kb，而源码只有 4kb。且发现打包结果中包含了 css-loader 的相关代码(这感觉很奇怪)，难道样式不应该使用 mini-css-extract-plugin 来进行抽取，而应该使用脚本(比如 gulp )来将 less 转换为 css？"),Object(c.b)("h2",{id:"3-todo"},"3. TODO"),Object(c.b)("p",null,"找一个 webpack 打包的库看看相关流程，是否不应该只依赖 webpack 进行打包组件库，而应该借助脚本和其他的库"))}void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"README.md"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---readme-md-abdd1e99b93b99742eb8.js.map